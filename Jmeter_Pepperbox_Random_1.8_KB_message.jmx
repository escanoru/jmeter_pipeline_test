<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Escanoru Kafka Template" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AlexR Test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">TIMER_S</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.gslab.pepper.config.plaintext.PlainTextConfigElement guiclass="TestBeanGUI" testclass="com.gslab.pepper.config.plaintext.PlainTextConfigElement" testname="Pepper-Box PlainText Config" enabled="true">
          <stringProp name="placeHolder">MESSAGE</stringProp>
          <stringProp name="jsonSchema">CEF:1|{{RANDOM_STRING(&quot;Vendor_1&quot;,&quot;Vendor_2&quot;,&quot;Vendor_2&quot;)}}|Random|Random|Random|Random|{{RANDOM_STRING(&quot;High&quot;,&quot;Medium&quot;,&quot;Low&quot;)}}| app={{RANDOM_STRING(&quot;https&quot;,&quot;http&quot;)}} in={{RANDOM_INT_RANGE(1000,9999)}} out={{RANDOM_INT_RANGE(1000,9999)}} categoryDeviceGroup=/{{RANDOM_STRING(&quot;Firewall&quot;,&quot;http&quot;)}} categoryOutcome=/Interrupt categorySignificance=/Normal categoryTechnique=Routing dst={{IPV4()}} destinationGeoLocationInfo=dtGL-11 dmac=00:08:C7:1B:8C:02 dpt=443 duser=test outcome=succeed categoryBehavior=/Prohibit reason=reason247 src={{IPV4()}} sourceGeoLocationInfo=sGLI-11 smac=00:08:C7:1B:8C:02 suid=SUID30 suser=Adminisatrator spriv=Adminisatrator proto={{RANDOM_STRING(&quot;TCP&quot;,&quot;UDP&quot;)}} type=2 agentNtDomain=agentNtDomain_1 agentTranslatedZoneExternalID=agentTZEID_1 agentZoneExternalID=agentZEID_1 customerExternalID=cEID-1111 destinationGeoCountryCode=dGCC-{{RANDOM_INT_RANGE(10,99)}} dlat=111.1111 dlong=111.1111 destinationGeoPostalCode=dGPC-{{RANDOM_INT_RANGE(10,99)}} destinationGeoRegionCode=dGRC-{{RANDOM_INT_RANGE(10,99)}} destinationTranslatedZoneExternalID=dTZEID-{{RANDOM_INT_RANGE(10,99)}} destinationZoneExternalID=dZEID-{{RANDOM_INT_RANGE(10,99)}} deviceTranslatedZoneExternalID=dTZEID_1 deviceZoneExternalID=dZEID_1 sourceGeoCountryCode=sSCC-{{RANDOM_INT_RANGE(10,99)}} slat={{RANDOM_INT_RANGE(10,99)}}.{{RANDOM_INT_RANGE(10,99999)}} slong={{RANDOM_INT_RANGE(10,99)}}.{{RANDOM_INT_RANGE(10000,99999)}} sourceGeoPostalCode=sGPC-{{RANDOM_INT_RANGE(10,99)}} sourceGeoRegionCode=sGRC-{{RANDOM_INT_RANGE(10,99)}} sourceTranslatedZoneURI=sTZEID-{{RANDOM_INT_RANGE(10,99)}} sourceZoneExternalID=sZEID-{{RANDOM_INT_RANGE(10,99)}} rt={{TIMESTAMP()}} eventId={{RANDOM_INT(1000,1050,2050,2150,2250,2350,2450,2550,2650,18050,18150,18250,18350,18450,18600)}} cfp1Label=deviceCustomFloatingPoint1Label-index-4-z cfp2=49.2 cfp2Label=deviceCustomFloatingPoint2Label-index-{{RANDOM_INT_RANGE(1,100)}}-z cfp3=49.3 cfp3Label=deviceCustomFloatingPoint3Label-index-{{RANDOM_INT_RANGE(10,100)}}-z cfp4={{RANDOM_INT_RANGE(10,1000)}}.4 cfp4Label=deviceCustomFloatingPoint4Label-index-4-z c6a1={{IPV6()}} c6a1Label=deviceCustomIPv6Address1Label-index-{{RANDOM_INT_RANGE(10,100)}}-z c6a2={{IPV6()}} c6a2Label=deviceCustomIPv6Address2Label-index-{{RANDOM_INT_RANGE(10,100)}}-z c6a3={{IPV6()}} c6a3Label=deviceCustomIPv6Address3Label-index-{{RANDOM_INT_RANGE(10,100)}}-z dntdom=destinationNtDomain-index-{{RANDOM_INT_RANGE(10,100)}}-z.domain.com dpt={{RANDOM_INT_RANGE(1000,10000)}} suid=sourceUserId-index-{{RANDOM_INT_RANGE(10,100)}} reason=reason-{{RANDOM_INT_RANGE(1,10)}}-z sourcePort={{RANDOM_INT_RANGE(1000,9999)}}</stringProp>
        </com.gslab.pepper.config.plaintext.PlainTextConfigElement>
        <hashTree/>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Java Request" enabled="true">
          <stringProp name="TestPlan.comments">non</stringProp>
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="bootstrap.servers" elementType="Argument">
                <stringProp name="Argument.name">bootstrap.servers</stringProp>
                <stringProp name="Argument.value">BROKER_NODES_FROM_JENKINS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zookeeper.servers" elementType="Argument">
                <stringProp name="Argument.name">zookeeper.servers</stringProp>
                <stringProp name="Argument.value">ZOOKEEPER_NODES_FROM_JENKINS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka.topic.name" elementType="Argument">
                <stringProp name="Argument.name">kafka.topic.name</stringProp>
                <stringProp name="Argument.value">TOPIC_NAME_FROM_JENKINS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="key.serializer" elementType="Argument">
                <stringProp name="Argument.name">key.serializer</stringProp>
                <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="value.serializer" elementType="Argument">
                <stringProp name="Argument.name">value.serializer</stringProp>
                <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="compression.type" elementType="Argument">
                <stringProp name="Argument.name">compression.type</stringProp>
                <stringProp name="Argument.value">COMPRESSION_FROM_JENKINS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="batch.size" elementType="Argument">
                <stringProp name="Argument.name">batch.size</stringProp>
                <stringProp name="Argument.value">BATCH_SIZE_FROM_JENKINS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="linger.ms" elementType="Argument">
                <stringProp name="Argument.name">linger.ms</stringProp>
                <stringProp name="Argument.value">LINGER_TIME_FROM_JENKINS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="buffer.memory" elementType="Argument">
                <stringProp name="Argument.name">buffer.memory</stringProp>
                <stringProp name="Argument.value">33554432</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="acks" elementType="Argument">
                <stringProp name="Argument.name">acks</stringProp>
                <stringProp name="Argument.value">ACKS_FROM_JENKINS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="send.buffer.bytes" elementType="Argument">
                <stringProp name="Argument.name">send.buffer.bytes</stringProp>
                <stringProp name="Argument.value">131072</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="receive.buffer.bytes" elementType="Argument">
                <stringProp name="Argument.name">receive.buffer.bytes</stringProp>
                <stringProp name="Argument.value">32768</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="security.protocol" elementType="Argument">
                <stringProp name="Argument.name">security.protocol</stringProp>
                <stringProp name="Argument.value">PLAINTEXT</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="keyed.message" elementType="Argument">
                <stringProp name="Argument.name">keyed.message</stringProp>
                <stringProp name="Argument.value">NO</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="message.key.placeholder" elementType="Argument">
                <stringProp name="Argument.name">message.key.placeholder</stringProp>
                <stringProp name="Argument.value">KEY</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="message.value.placeholder" elementType="Argument">
                <stringProp name="Argument.name">message.value.placeholder</stringProp>
                <stringProp name="Argument.value">MESSAGE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kerberos.auth.enabled" elementType="Argument">
                <stringProp name="Argument.name">kerberos.auth.enabled</stringProp>
                <stringProp name="Argument.value">NO</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="java.security.auth.login.config" elementType="Argument">
                <stringProp name="Argument.name">java.security.auth.login.config</stringProp>
                <stringProp name="Argument.value">&lt;JAAS File Location&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="java.security.krb5.conf" elementType="Argument">
                <stringProp name="Argument.name">java.security.krb5.conf</stringProp>
                <stringProp name="Argument.value">&lt;krb5.conf location&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sasl.kerberos.service.name" elementType="Argument">
                <stringProp name="Argument.name">sasl.kerberos.service.name</stringProp>
                <stringProp name="Argument.value">kafka</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sasl.mechanism" elementType="Argument">
                <stringProp name="Argument.name">sasl.mechanism</stringProp>
                <stringProp name="Argument.value">GSSAPI</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ssl.enabled" elementType="Argument">
                <stringProp name="Argument.name">ssl.enabled</stringProp>
                <stringProp name="Argument.value">NO</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ssl.key.password" elementType="Argument">
                <stringProp name="Argument.name">ssl.key.password</stringProp>
                <stringProp name="Argument.value">&lt;Key Password&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ssl.keystore.location" elementType="Argument">
                <stringProp name="Argument.name">ssl.keystore.location</stringProp>
                <stringProp name="Argument.value">&lt;Keystore Location&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ssl.keystore.password" elementType="Argument">
                <stringProp name="Argument.name">ssl.keystore.password</stringProp>
                <stringProp name="Argument.value">&lt;Keystore Password&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ssl.truststore.location" elementType="Argument">
                <stringProp name="Argument.name">ssl.truststore.location</stringProp>
                <stringProp name="Argument.value">&lt;Truststore Location&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ssl.truststore.password" elementType="Argument">
                <stringProp name="Argument.name">ssl.truststore.password</stringProp>
                <stringProp name="Argument.value">&lt;Truststore Password&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">com.gslab.pepper.sampler.PepperBoxKafkaSampler</stringProp>
        </JavaSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>